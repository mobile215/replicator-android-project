/*
 * Copyright (C) 2020 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

package com.android.gradle.replicator.generator

import java.io.File
import kotlin.system.exitProcess

class Main {
    companion object {
        @JvmStatic
        fun main(args: Array<String>) {
            val params = parseArgs(args) ?: exitProcess(0)

            if (!params.isValid()) {
                throw RuntimeException("Not all parameters have been provided")
            }

            BuildGenerator(params).generate()
        }

        internal fun parseArgs(args: Array<String>): ExecutionParams? {
            if (args.isEmpty()) {
                println(USAGE)
                return null
            }

            // let's be basic here for now
            val params = ExecutionParams()

            var index = 0
            while (index < args.size) {
                when (val option = args[index]) {
                    "--destination", "-d" -> {
                        params.destination = checkFolderParam(args, index)
                        index++
                    }
                    "--structure", "-s" -> {
                        params.jsonFile = checkFileParam(args, index)
                        index++
                    }
                    "--filter-libraries", "-f" -> {
                        params.libraryFilter = checkFileParam(args, index)
                        index++
                    }
                    "--add-libraries", "-a" -> {
                        params.libraryAdditions = checkFileParam(args, index)
                        index++
                    }
                    "--kts" -> {
                        params.kts = true
                    }
                    else -> throw RuntimeException("Unknown option: $option")
                }
                index++
            }

            return params
        }

        private fun checkFolderParam(args: Array<String>, index: Int): File {
            return File(args[index + 1]).also {
                if (it.isDirectory.not()) {
                    if (it.exists()) {
                        throw RuntimeException("Location for option ${args[index]} is not a folder: $it")
                    } else {
                        throw RuntimeException("Location for option ${args[index]} does not exist: $it")
                    }
                }
            }
        }

        private fun checkFileParam(args: Array<String>, index: Int): File {
            return File(args[index + 1]).also {
                if (it.isFile.not()) {
                    if (it.exists()) {
                        throw RuntimeException("Location for option ${args[index]} is not a file: $it")
                    } else {
                        throw RuntimeException("Location for option ${args[index]} does not exist: $it")
                    }
                }
            }
        }

        internal val USAGE = """
                Gradle Project Generator. Usage:

                gradlew[.bat] generator:run --structure <file> --destination <folder> [OPTIONS]
                
                -s, --structure: the location of a json file generated by the Structure Extractor Gradle Plugin
                -d, --destination: the folder where to write the project. The folder must exist and be empty
                -f, --filter-libraries: a file containing a list of libraries to filter or replace
                                        Format for removal is one line per maven coordinates to remove
                                        To replace a library, add " -> <coordinate to replace with>"
                -d, --add-libraries: a file containing libraries to add to specific sub-projects. Line format is:
                                     <modulepath><space><configuration name><space><dependency string>
                --kts: generates kts-based build files
""".trimIndent()
    }
}

class ExecutionParams: BuildGenerator.Params {
    override lateinit var jsonFile: File
    override lateinit var destination: File
    override var libraryFilter: File? = null
    override var libraryAdditions: File? = null
    override var kts: Boolean = false

    fun isValid(): Boolean {
        if (!::jsonFile.isInitialized) throw RuntimeException("structure file location has not been provider")
        if (!::destination.isInitialized) throw RuntimeException("destination location has not been provider")

        if (destination.listFiles().isNullOrEmpty()) {
            return true
        }

        throw java.lang.RuntimeException("Destination location is not empty: $destination")
    }
}
